/**
 * 
 * This file was written by Henry Forsyth
 * Februrary 15, 2021
 * 
 * 
 * The objective of this file is to
 * run the bluetooth chip for the project,
 * most likely utilizing the Serial communication
 * protocol to impact change on the device from the GUI
 * 
 * Functionality can be enabled in the "Configuration.h" file
 * Should debugging be needed, disable all other features and simply
 * enable the "DEBUG" variable. This will output appropriate unit testing values
 **/

#include "Configuration.h"
#include "Screen.h"

#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>

#ifdef ACTIVATE_OLCD

//init code
Screen::Screen()
{
        // static Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
        // display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
        // display.clearDisplay();
}

boolean Screen::init()
{
        Serial.println("Screen - Online");

        // // static Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
        // // display.begin(SSD1306_SWITCHCAPVCC, 0x3C);

        // static const unsigned char PROGMEM logo_bmp[] =
        //     {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x80, 0x00, 0x00, 0x00, 0x00,
        //      0xff, 0xf8, 0x03, 0xf0, 0x3c, 0x01, 0x88, 0x00, 0x08, 0x0f, 0xc0, 0xe0, 0x1e, 0x70, 0x0f, 0x80,
        //      0xe0, 0x3e, 0x07, 0xf0, 0x3c, 0x07, 0x8e, 0x00, 0x38, 0x1f, 0xc0, 0xf0, 0x1e, 0x7c, 0x0f, 0x80,
        //      0xf0, 0x1e, 0x0f, 0xf8, 0x3c, 0x07, 0x8f, 0x80, 0xf8, 0x3f, 0xe0, 0xfc, 0x1e, 0x7f, 0x0f, 0x80,
        //      0xf0, 0x3e, 0x0f, 0x7c, 0x3c, 0x07, 0x8f, 0xe3, 0xf8, 0x3d, 0xe0, 0xff, 0x1e, 0x7f, 0xcf, 0x80,
        //      0xff, 0xfc, 0x1f, 0x3c, 0x3c, 0x07, 0x8f, 0xff, 0xf8, 0x78, 0xf0, 0xf7, 0xde, 0x7d, 0xef, 0x80,
        //      0xf8, 0x3e, 0x1e, 0x3e, 0x3c, 0x07, 0x8f, 0x3e, 0x78, 0xf8, 0xf8, 0xf1, 0xfe, 0x7c, 0x7f, 0x80,
        //      0xf0, 0x1e, 0x3f, 0xfe, 0x3e, 0x07, 0x8f, 0x18, 0x78, 0xff, 0xf8, 0xf0, 0x7e, 0x7c, 0x3f, 0x80,
        //      0xf8, 0x3e, 0x7f, 0xff, 0x1e, 0x0f, 0x8f, 0x00, 0x79, 0xff, 0xfc, 0xf0, 0x1e, 0x7c, 0x0f, 0x80,
        //      0xf3, 0xf8, 0x78, 0x0f, 0x8f, 0xfe, 0x0f, 0x00, 0x79, 0xe0, 0x3c, 0xf0, 0x0e, 0x7c, 0x03, 0x80,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x00, 0x00, 0x80,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //      0x00, 0x07, 0x80, 0x78, 0x00, 0x1f, 0xf0, 0x0f, 0xff, 0xc0, 0x3c, 0x03, 0xff, 0xf0, 0x00, 0x00,
        //      0x00, 0x07, 0x8f, 0xff, 0xc0, 0x3f, 0xff, 0x8f, 0xff, 0xc7, 0xff, 0xe3, 0xff, 0xf0, 0x00, 0x00,
        //      0x00, 0x07, 0x9f, 0x03, 0xc0, 0x3c, 0x07, 0xcf, 0x00, 0x0f, 0x81, 0xf0, 0x1e, 0x00, 0x00, 0x00,
        //      0x00, 0x07, 0x9f, 0x02, 0x00, 0x3e, 0x07, 0xcf, 0x00, 0x0f, 0x80, 0x00, 0x1e, 0x00, 0x00, 0x00,
        //      0x00, 0x07, 0x8f, 0xfe, 0x00, 0x3f, 0xff, 0x8f, 0xff, 0x87, 0xff, 0x00, 0x1e, 0x00, 0x00, 0x00,
        //      0x00, 0x07, 0x80, 0xff, 0xc0, 0x3f, 0xff, 0x8f, 0xff, 0x00, 0x7f, 0xe0, 0x1e, 0x00, 0x00, 0x00,
        //      0x00, 0x07, 0x82, 0x03, 0xc0, 0x3e, 0x07, 0xcf, 0x00, 0x01, 0x81, 0xf0, 0x1e, 0x00, 0x00, 0x00,
        //      0x00, 0x07, 0x9f, 0x03, 0xc0, 0x3e, 0x07, 0xcf, 0x00, 0x07, 0x81, 0xf0, 0x1e, 0x00, 0x00, 0x00,
        //      0x00, 0x07, 0x8f, 0xff, 0x80, 0x3e, 0xff, 0x8f, 0xff, 0x87, 0xff, 0xe0, 0x1e, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1e, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        //      0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};

        // display.drawBitmap(0, 0, logo_bmp, 128, 64, SSD1306_WHITE);
        // display.display();
        // delay(3000);
        // //display.drawPixel(10, 10, SSD1306_WHITE);

        return true;
}

void Screen::Weather_Station()
{
        static Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);
        display.begin(SSD1306_SWITCHCAPVCC, 0x3C);
        display.clearDisplay();
        display.setTextSize(1);
        display.setTextColor(WHITE);
        display.setCursor(0, 0);
        display.println("Humidity: ");
        display.setCursor(0, 10);
        display.print("Temperature: ");
        display.display();
}

#endif